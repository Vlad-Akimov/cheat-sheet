import logging
from aiogram import Bot, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, KeyboardButton, InputFile, InlineKeyboardButton

from config import config
from text import texts
from kb import *
from db import db
from utils import is_valid_file_type, get_file_type, delete_previous_messages, reply_with_menu
from states import SearchCheatsheetStates, AddCheatsheetStates, AddBalanceStates, BalanceRequestStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

async def cmd_start(message: types.Message):
    await delete_previous_messages(message, 1000)
    await reply_with_menu(message, texts.START, delete_prev=False)

async def cmd_help(message: types.Message):
    await reply_with_menu(message, texts.HELP)

async def search_cheatsheets(message: types.Message, state: FSMContext):
    await delete_previous_messages(message)
    subjects = db.get_subjects()
    if not subjects:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    await message.answer(texts.SELECT_SUBJECT, reply_markup=subjects_kb(subjects))
    await state.set_state(SearchCheatsheetStates.waiting_for_subject)

async def process_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split("_")[1]
    await state.update_data(subject=subject)
    await callback.message.edit_text(texts.SELECT_SEMESTER, reply_markup=semesters_kb())
    await state.set_state(SearchCheatsheetStates.waiting_for_semester)

async def process_semester(callback: types.CallbackQuery, state: FSMContext):
    semester = int(callback.data.split("_")[1])
    await state.update_data(semester=semester)
    await callback.message.edit_text(texts.SELECT_TYPE, reply_markup=types_kb())
    await state.set_state(SearchCheatsheetStates.waiting_for_type)

async def process_type(callback: types.CallbackQuery, state: FSMContext):
    type_ = callback.data.split("_")[1]
    data = await state.get_data()
    
    cheatsheets = db.get_cheatsheets(
        subject=data.get("subject"),
        semester=data.get("semester"),
        type_=type_
    )
    
    if not cheatsheets:
        await reply_with_menu(callback, texts.NO_CHEATSHEETS, delete_current=True)
        await state.clear()
        return
    
    for cheatsheet in cheatsheets:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if not all(key in cheatsheet for key in ['subject', 'semester', 'type', 'name', 'author', 'price', 'file_id', 'file_type']):
            print(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏: {cheatsheet}")
            continue
            
        text = texts.CHEATSHEET_INFO.format(
            name=cheatsheet["name"],
            subject=cheatsheet["subject"],
            semester=cheatsheet["semester"],
            type=cheatsheet["type"],
            author=cheatsheet["author"],
            price=cheatsheet["price"]
        )
        
        if cheatsheet["price"] > 0:
            markup = buy_kb(cheatsheet["id"], cheatsheet["price"])
        else:
            markup = free_kb(cheatsheet["file_id"])
        
        await callback.message.answer(text, reply_markup=markup)
    
    await state.clear()

async def add_cheatsheet(message: types.Message, state: FSMContext):
    await delete_previous_messages(message)
    subjects = db.get_subjects()
    if not subjects:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    await message.answer(texts.SELECT_SUBJECT, reply_markup=subjects_kb(subjects))
    await state.set_state(AddCheatsheetStates.waiting_for_subject)

async def process_add_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split("_")[1]
    await state.update_data(subject=subject)
    await callback.message.edit_text(texts.SELECT_SEMESTER, reply_markup=semesters_kb())
    await state.set_state(AddCheatsheetStates.waiting_for_semester)

async def process_add_semester(callback: types.CallbackQuery, state: FSMContext):
    semester = int(callback.data.split("_")[1])
    await state.update_data(semester=semester)
    await callback.message.edit_text(texts.SELECT_TYPE, reply_markup=types_kb())
    await state.set_state(AddCheatsheetStates.waiting_for_type)

async def process_add_type(callback: types.CallbackQuery, state: FSMContext):
    type_ = callback.data.split("_")[1]
    await state.update_data(type=type_)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏:", reply_markup=cancel_kb())
    await state.set_state(AddCheatsheetStates.waiting_for_name)

async def process_name(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(name=message.text)
    await message.answer(texts.SEND_FILE, reply_markup=cancel_kb())
    await state.set_state(AddCheatsheetStates.waiting_for_file)

async def process_file(message: types.Message, state: FSMContext):
    if not is_valid_file_type(message):
        await message.answer(texts.INVALID_FILE)
        return
    
    file_type = get_file_type(message)
    file_id = None
    
    if file_type == "photo":
        file_id = message.photo[-1].file_id
    elif file_type == "document":
        file_id = message.document.file_id
    elif file_type == "text":
        file_id = message.text
    
    await state.update_data(file_id=file_id, file_type=file_type)
    await message.answer(texts.SET_PRICE, reply_markup=cancel_kb())
    await state.set_state(AddCheatsheetStates.waiting_for_price)

async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price < 0:
            raise ValueError
    except ValueError:
        await message.answer(texts.INVALID_PRICE)
        return
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['subject', 'semester', 'type', 'name', 'file_id', 'file_type']
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        await message.answer(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ ({', '.join(missing_fields)}). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    subject_id = db.cursor.execute("SELECT id FROM subjects WHERE name = ?", (data["subject"],)).fetchone()
    if not subject_id:
        db.add_subject(data["subject"])
        subject_id = db.cursor.execute("SELECT id FROM subjects WHERE name = ?", (data["subject"],)).fetchone()[0]
    else:
        subject_id = subject_id[0]
    
    cheatsheet_id = db.add_cheatsheet(
        subject_id=subject_id,
        semester=data["semester"],
        type_=data["type"],
        name=data["name"],
        file_id=data["file_id"],
        file_type=data["file_type"],
        price=price,
        author_id=message.from_user.id
    )
    
    user = message.from_user
    admin_text = texts.NEW_CHEATSHEET_FOR_REVIEW.format(
        name=data["name"],
        subject=data["subject"],
        semester=data["semester"],
        type=data["type"],
        price=price,
        author=f"{user.username} (ID: {user.id})"
    )
    
    if data["file_type"] == "photo":
        await message.bot.send_photo(
            chat_id=config.ADMIN_ID,
            photo=data["file_id"],
            caption=admin_text,
            reply_markup=admin_review_kb(cheatsheet_id)
        )
    elif data["file_type"] == "document":
        await message.bot.send_document(
            chat_id=config.ADMIN_ID,
            document=data["file_id"],
            caption=admin_text,
            reply_markup=admin_review_kb(cheatsheet_id)
        )
    else:
        await message.bot.send_message(
            chat_id=config.ADMIN_ID,
            text=f"{admin_text}\n\n–¢–µ–∫—Å—Ç —à–ø–∞—Ä–≥–∞–ª–∫–∏:\n\n{data['file_id']}",
            reply_markup=admin_review_kb(cheatsheet_id)
        )
    
    await message.answer(texts.CHEATSHEET_SENT_FOR_REVIEW, reply_markup=main_menu())
    await state.clear()

async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await reply_with_menu(callback, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

async def show_user_cheatsheets(message: types.Message):
    cheatsheets = db.get_user_cheatsheets(message.from_user.id)
    if not cheatsheets:
        await reply_with_menu(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–ø–∞—Ä–≥–∞–ª–æ–∫.")
        return
    
    text = "üìö –í–∞—à–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏:\n\n"
    for cs in cheatsheets:
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if cs["is_approved"] else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        text += f"üìå {cs['name']}\n{cs['subject']}, {cs['semester']} —Å–µ–º–µ—Å—Ç—Ä, {cs['type']} - {cs['price']} —Ä—É–±. ({status})\n\n"
    
    await reply_with_menu(message, text)

async def show_balance(message: types.Message):
    balance = db.get_user_balance(message.from_user.id)
    await reply_with_menu(message, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.")

async def buy_cheatsheet(callback: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        if not callback.data:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return

        data_parts = callback.data.split("_")
        if len(data_parts) != 2:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return

        action, identifier = data_parts

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫
        if action == "free":
            await callback.message.answer(
                f"üìÑ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:\n\n{identifier}",
                reply_markup=main_menu()
            )
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫
        try:
            cheatsheet_id = int(identifier)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —à–ø–∞—Ä–≥–∞–ª–∫–∏")
            return

        user_id = callback.from_user.id
        cheatsheet = db.get_cheatsheet(cheatsheet_id)

        if not cheatsheet:
            await callback.answer("–®–ø–∞—Ä–≥–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['price', 'author_id', 'file_id', 'file_type']
        if not all(field in cheatsheet for field in required_fields):
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–∫–∏", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        user_balance = db.get_user_balance(user_id)
        if user_balance < cheatsheet["price"]:
            await callback.answer(texts.NOT_ENOUGH_MONEY, show_alert=True)
            await reply_with_menu(callback, 
                                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±.\n"
                                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {cheatsheet['price']} —Ä—É–±.\n\n"
                                "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        try:
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            if not db.update_user_balance(user_id, -cheatsheet["price"]):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞")

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω)
            if cheatsheet["author_id"] != config.ADMIN_ID:
                author_amount = round(cheatsheet["price"] * (1 - config.ADMIN_PERCENT), 2)
                if not db.update_user_balance(cheatsheet["author_id"], author_amount):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ—Ä—É")

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_amount = round(cheatsheet["price"] * config.ADMIN_PERCENT, 2)
            if not db.update_user_balance(config.ADMIN_ID, admin_amount):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

            # –ó–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
            if not db.add_purchase(user_id, cheatsheet_id, cheatsheet["price"]):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∫—É")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if cheatsheet["file_type"] == "photo":
                await callback.message.answer_photo(
                    cheatsheet["file_id"],
                    caption=f"‚úÖ {texts.PURCHASE_SUCCESS}",
                    reply_markup=main_menu()
                )
            elif cheatsheet["file_type"] == "document":
                await callback.message.answer_document(
                    cheatsheet["file_id"],
                    caption=f"‚úÖ {texts.PURCHASE_SUCCESS}",
                    reply_markup=main_menu()
                )
            else:  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏
                await callback.message.answer(
                    f"‚úÖ {texts.PURCHASE_SUCCESS}\n\n{cheatsheet['file_id']}",
                    reply_markup=main_menu()
                )

            await callback.message.delete()
            await callback.answer()

        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            db.conn.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return

    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ buy_cheatsheet: {e}")

async def deposit_balance(message: types.Message):
    await reply_with_menu(
        message,
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –Ω–∞—à —Å—á–µ—Ç\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Vld251\n"
        "3. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω"
    )

# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
def admin_balance_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True
    )

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
async def request_balance(message: types.Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BalanceRequestStates.waiting_for_amount)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É
async def process_balance_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        await state.update_data(amount=amount)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç PDF/JPG/PNG),\n"
            "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Ç.–¥.):",
            reply_markup=cancel_kb()
        )
        await state.set_state(BalanceRequestStates.waiting_for_proof)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)")

async def notify_admin_about_request(bot: Bot, request_id: int, user: types.User, amount: float, 
                                   file_id: str = None, file_type: str = None, proof_text: str = None):
    text = (
        f"üÜï –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{request_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} (ID: {user.id})\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
    )
    
    if proof_text:
        text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {proof_text}\n"
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"balance_approve_{request_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"balance_reject_{request_id}")]
    ])
    
    try:
        if file_id:
            if file_type == "photo":
                await bot.send_photo(
                    chat_id=config.ADMIN_ID,
                    photo=file_id,
                    caption=text,
                    reply_markup=markup
                )
            else:
                await bot.send_document(
                    chat_id=config.ADMIN_ID,
                    document=file_id,
                    caption=text,
                    reply_markup=markup
                )
        else:
            await bot.send_message(
                chat_id=config.ADMIN_ID,
                text=text,
                reply_markup=markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def process_balance_proof(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
    if 'amount' not in data or data['amount'] <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞", reply_markup=main_menu())
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç
    file_id = None
    file_type = None
    proof_text = None

    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.text:
        proof_text = message.text
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=main_menu())
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    request_id = db.add_balance_request(
        user_id=message.from_user.id,
        amount=data['amount'],
        proof_text=proof_text,
        file_id=file_id,
        file_type=file_type
    )

    if not request_id:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await notify_admin_about_request(message.bot, request_id, message.from_user, data['amount'], file_id, file_type, proof_text)
    
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", reply_markup=main_menu())
    await state.clear()


# –ê–¥–º–∏–Ω: –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def admin_add_balance(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
        reply_markup=admin_balance_kb()
    )
    await state.set_state(AddBalanceStates.waiting_for_user_id)

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_user_id(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu())
        await state.clear()
        return
    
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=admin_balance_kb()
        )
        await state.set_state(AddBalanceStates.waiting_for_amount)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


# –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
async def handle_balance_request(callback: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        parts = callback.data.split('_')
        if len(parts) != 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        action, request_id = parts[1], parts[2]
        
        try:
            request_id = int(request_id)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        db.cursor.execute("""
        SELECT user_id, amount, file_id, file_type, proof_text 
        FROM balance_requests 
        WHERE id = ? AND status = 'pending'
        """, (request_id,))
        request = db.cursor.fetchone()

        if not request:
            await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            return

        user_id, amount, file_id, file_type, proof_text = request

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        success = db.update_request_status(
            request_id=request_id,
            status="approved" if action == "approve" else "rejected",
            admin_id=callback.from_user.id
        )

        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            return

        # –ï—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–æ - –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        if action == "approve":
            if not db.update_user_balance(user_id, amount):
                await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", show_alert=True)
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if action == "approve":
            new_balance = db.get_user_balance(user_id)
            user_message = (
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} —Ä—É–±. –æ–¥–æ–±—Ä–µ–Ω.\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±."
            )
        else:
            user_message = f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω–µ–Ω."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.bot.send_message(user_id, user_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        try:
            if file_id:  # –ï—Å–ª–∏ –±—ã–ª —Ñ–∞–π–ª
                if file_type == "photo":
                    await callback.message.edit_caption(
                        caption=f"–ó–∞–ø—Ä–æ—Å #{request_id} {'–æ–¥–æ–±—Ä–µ–Ω' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}",
                        reply_markup=None
                    )
                else:  # document
                    await callback.message.edit_caption(
                        caption=f"–ó–∞–ø—Ä–æ—Å #{request_id} {'–æ–¥–æ–±—Ä–µ–Ω' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}",
                        reply_markup=None
                    )
            else:  # –ï—Å–ª–∏ –±—ã–ª —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    f"–ó–∞–ø—Ä–æ—Å #{request_id} {'–æ–¥–æ–±—Ä–µ–Ω' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}",
                    reply_markup=None
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def process_amount(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu())
        await state.clear()
        return
    
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        data = await state.get_data()
        user_id = data["user_id"]
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        db.update_user_balance(user_id, amount)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        new_balance = db.get_user_balance(user_id)
        
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.",
            reply_markup=main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                chat_id=user_id,
                text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.\n"
                     f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±."
            )
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        await state.clear()
        
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def process_balance_request(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    try:
        user_id, amount = message.text.split()
        user_id = int(user_id)
        amount = float(amount)
        
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        db.update_user_balance(user_id, amount)
        await message.answer(
            f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.",
            reply_markup=main_menu()
        )
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.bot.send_message(
            chat_id=user_id,
            text=f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {db.get_user_balance(user_id)} —Ä—É–±."
        )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()

def register_handlers(dp):
    # –ö–æ–º–∞–Ω–¥—ã
    router.message.register(cmd_start, Command("start"))
    router.message.register(cmd_help, Command("help"))
    
    # –ú–µ–Ω—é
    router.message.register(search_cheatsheets, F.text == texts.SEARCH_CHEATSHEET)
    router.message.register(add_cheatsheet, F.text == texts.ADD_CHEATSHEET)
    router.message.register(show_user_cheatsheets, F.text == texts.MY_CHEATSHEETS)
    router.message.register(show_balance, F.text == texts.BALANCE)
    
    # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    router.message.register(request_balance, F.text == texts.DEPOSIT)
    router.message.register(process_balance_amount, BalanceRequestStates.waiting_for_amount)
    router.message.register(process_balance_proof, 
                          BalanceRequestStates.waiting_for_proof,
                          F.content_type.in_({'photo', 'document', 'text'}))
    
    # –ü–æ–∏—Å–∫ —à–ø–∞—Ä–≥–∞–ª–æ–∫
    router.callback_query.register(process_subject, F.data.startswith("subject_"), SearchCheatsheetStates.waiting_for_subject)
    router.callback_query.register(process_semester, F.data.startswith("semester_"), SearchCheatsheetStates.waiting_for_semester)
    router.callback_query.register(process_type, F.data.startswith("type_"), SearchCheatsheetStates.waiting_for_type)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–æ–∫
    router.callback_query.register(process_add_subject, F.data.startswith("subject_"), AddCheatsheetStates.waiting_for_subject)
    router.callback_query.register(process_add_semester, F.data.startswith("semester_"), AddCheatsheetStates.waiting_for_semester)
    router.callback_query.register(process_add_type, F.data.startswith("type_"), AddCheatsheetStates.waiting_for_type)
    router.message.register(process_name, AddCheatsheetStates.waiting_for_name)
    router.message.register(process_file, F.content_type.in_({'photo', 'document', 'text'}), AddCheatsheetStates.waiting_for_file)
    router.message.register(process_price, AddCheatsheetStates.waiting_for_price)
    
    # –û—Ç–º–µ–Ω–∞
    router.callback_query.register(cancel_handler, F.data == "cancel", StateFilter('*'))
    
    # –ü–æ–∫—É–ø–∫–∞
    router.callback_query.register(buy_cheatsheet, F.data.startswith("buy_"))
    router.callback_query.register(buy_cheatsheet, F.data.startswith("free_"))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–æ–º
    router.callback_query.register(handle_balance_request, F.data.startswith("balance_approve_"))
    router.callback_query.register(handle_balance_request, F.data.startswith("balance_reject_"))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    router.message.register(admin_add_balance, Command("addbalance"))
    router.message.register(process_user_id, AddBalanceStates.waiting_for_user_id)
    router.message.register(process_amount, AddBalanceStates.waiting_for_amount)
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)