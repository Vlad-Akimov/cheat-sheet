import logging
from aiogram import F, Bot, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from datetime import datetime

from config import config
from text import texts
from kb import *
from db import db
from admin_commands import notify_admin_about_request
from utils import is_valid_file_type, get_file_type, delete_previous_messages, reply_with_menu, save_file
from states import *

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ö–æ–º–∞–Ω–¥—ã ----------------------------------------------------

async def cmd_start(message: types.Message):
    try:
        await delete_previous_messages(message, 1000)
        await reply_with_menu(message, texts.START, delete_prev=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –º—ã —É–∂–µ —Ä–µ—à–∞–µ–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É.")


async def cmd_help(message: types.Message):
    await reply_with_menu(message, texts.HELP)

# –ú–µ–Ω—é  ------------------------------------------------------

async def search_cheatsheets(message: types.Message, state: FSMContext):
    await delete_previous_messages(message)
    subjects = db.get_subjects()
    if not subjects:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    await message.answer(texts.SELECT_SUBJECT, reply_markup=subjects_kb(subjects))
    await state.set_state(SearchCheatsheetStates.waiting_for_subject)


async def add_cheatsheet(message: types.Message, state: FSMContext):
    await delete_previous_messages(message)
    subjects = db.get_subjects()
    if not subjects:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    await message.answer(texts.SELECT_SUBJECT, reply_markup=subjects_kb(subjects))
    await state.set_state(AddCheatsheetStates.waiting_for_subject)


async def show_user_cheatsheets_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–∏—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫"""
    await delete_previous_messages(message)
    subjects = db.get_subjects()
    if not subjects:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    
    builder = InlineKeyboardBuilder()
    for subject in subjects:
        builder.button(text=subject, callback_data=f"my_subject_{subject}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(
        text=texts.CANCEL_SEARCH,
        callback_data="back_to_menu"
    ))
    
    await message.answer(texts.FILTER_BY_SUBJECT, reply_markup=builder.as_markup())
    await state.set_state(MyCheatsheetsStates.waiting_for_subject)


async def process_my_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split("_")[2]  # my_subject_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Üí –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    await state.update_data(subject=subject)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä:", reply_markup=semesters_kb_for_my_cheatsheets())
    await state.set_state(MyCheatsheetsStates.waiting_for_semester)


async def process_my_semester(callback: types.CallbackQuery, state: FSMContext):
    semester = int(callback.data.split("_")[2])  # my_semester_1 ‚Üí 1
    await state.update_data(semester=semester)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=types_kb_for_my_cheatsheets())
    await state.set_state(MyCheatsheetsStates.waiting_for_type)


async def process_my_type(callback: types.CallbackQuery, state: FSMContext):
    type_ = callback.data.split("_")[2]  # my_type_formulas ‚Üí formulas
    await state.update_data(type=type_)
    data = await state.get_data()
    
    cheatsheets = db.get_user_cheatsheets(
        callback.from_user.id,
        subject=data.get('subject'),
        semester=data.get('semester'),
        type_=type_
    )
    
    if not cheatsheets:
        await reply_with_menu(callback, texts.NO_CHEATSHEETS, delete_current=True)
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
    current_search_message_ids = []
    
    for cs in cheatsheets:
        status = "üõí –ö—É–ø–ª–µ–Ω–∞" if cs.get("is_purchased", False) else ("‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if cs["is_approved"] else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        text = (
            f"üìå {cs['name']}\n"
            f"üìö {cs['subject']}, {cs['semester']} —Å–µ–º–µ—Å—Ç—Ä\n"
            f"üìù {'–§–æ—Ä–º—É–ª–∞' if cs['type'] == 'formulas' else '–¢–µ–æ—Ä–∏—è'}\n"
            f"üí∞ {cs['price']} —Ä—É–±. | {status}"
        )
        msg = await callback.message.answer(text, reply_markup=my_cheatsheet_kb(cs))
        current_search_message_ids.append(msg.message_id)
    
    await state.update_data(current_search_message_ids=current_search_message_ids)
    await callback.answer()


async def my_back_to_subject(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ '–ú–æ–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏' —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if 'current_search_message_ids' in data:
            for msg_id in data['current_search_message_ids']:
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        
        await state.set_state(MyCheatsheetsStates.waiting_for_subject)
        subjects = db.get_subjects()
        
        builder = InlineKeyboardBuilder()
        for subject in subjects:
            builder.button(text=subject, callback_data=f"my_subject_{subject}")
        builder.adjust(2)
        builder.row(InlineKeyboardButton(
            text=texts.CANCEL_SEARCH,
            callback_data="back_to_menu"
        ))
        
        await callback.message.edit_text(
            texts.FILTER_BY_SUBJECT,
            reply_markup=builder.as_markup()
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Error returning to subject: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", show_alert=True)


async def my_back_to_semester(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ '–ú–æ–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏' —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if 'current_search_message_ids' in data:
            for msg_id in data['current_search_message_ids']:
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        
        await state.set_state(MyCheatsheetsStates.waiting_for_semester)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä:",
            reply_markup=semesters_kb_for_my_cheatsheets()
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Error returning to semester: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", show_alert=True)


async def open_my_cheatsheet(callback: types.CallbackQuery):
    try:
        cheatsheet_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —à–ø–∞—Ä–≥–∞–ª–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        cheatsheet = db.get_cheatsheet(cheatsheet_id, user_id)
        
        if not cheatsheet:
            await callback.answer("–®–ø–∞—Ä–≥–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏
        if cheatsheet["file_type"] == "photo":
            await callback.message.answer_photo(
                cheatsheet["file_id"],
                caption=f"üìÑ {cheatsheet['name']}",
                reply_markup=main_menu()
            )
        elif cheatsheet["file_type"] == "document":
            await callback.message.answer_document(
                cheatsheet["file_id"],
                caption=f"üìÑ {cheatsheet['name']}",
                reply_markup=main_menu()
            )
        else:
            await callback.message.answer(
                f"üìÑ {cheatsheet['name']}\n\n{cheatsheet['file_id']}",
                reply_markup=main_menu()
            )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error opening cheatsheet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏", show_alert=True)


async def show_balance(message: types.Message):
    balance = db.get_user_balance(message.from_user.id)
    await message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.",
        reply_markup=withdraw_kb()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
    )


async def handle_balance_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –±–∞–ª–∞–Ω—Å–∞"""
    await state.clear()
    await reply_with_menu(message, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


async def request_feedback(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(
        texts.FEEDBACK_PROMPT,
        reply_markup=cancel_kb()
    )
    await state.set_state(FeedbackStates.waiting_for_feedback)


async def process_feedback(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤"""
    if len(message.text) > 1000:
        await message.answer(texts.FEEDBACK_TOO_LONG)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    feedback_id = db.add_feedback(message.from_user.id, message.text)
    
    if feedback_id:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await notify_admin_about_feedback(
            message.bot,
            feedback_id,
            message.from_user,
            message.text
        )
        await message.answer(texts.FEEDBACK_SENT, reply_markup=main_menu())
    else:
        await message.answer(texts.ERROR, reply_markup=main_menu())
    
    await delete_previous_messages(message, 3)
    await state.clear()


async def notify_admin_about_feedback(bot: Bot, feedback_id: int, user: types.User, message: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ"""
    text = texts.FEEDBACK_NOTIFICATION.format(
        id=feedback_id,
        username=user.username,
        user_id=user.id,
        message=message,
        date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )
    
    markup = feedback_review_kb(feedback_id)
    
    try:
        await bot.send_message(
            chat_id=config.ADMIN_ID,
            text=text,
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")


async def handle_feedback_request(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏"""
    try:
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return
            
        action = parts[1]
        try:
            feedback_id = int(parts[2])
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞")
            return
            
        admin_id = callback.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
        success = db.update_feedback_status(
            feedback_id=feedback_id,
            status="approved" if action == "approve" else "rejected",
            admin_id=admin_id
        )
        
        if not success:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
        db.cursor.execute(
            "SELECT user_id, message FROM feedback WHERE id = ?", 
            (feedback_id,)
        )
        feedback = db.cursor.fetchone()
        
        if feedback:
            user_id, message = feedback
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = texts.FEEDBACK_APPROVED if action == "approve" else texts.FEEDBACK_REJECTED
            try:
                await callback.bot.send_message(user_id, user_message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        await callback.message.edit_text(
            f"–û—Ç–∑—ã–≤ #{feedback_id} {'–æ–¥–æ–±—Ä–µ–Ω' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}",
            reply_markup=None
        )
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ü–æ–∏—Å–∫ —à–ø–∞—Ä–≥–∞–ª–æ–∫ ---------------------------------------------

async def process_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split("_")[1]
    await state.update_data(subject=subject)
    await callback.message.edit_text(texts.SELECT_SEMESTER, reply_markup=semesters_kb())
    await state.set_state(SearchCheatsheetStates.waiting_for_semester)


async def process_semester(callback: types.CallbackQuery, state: FSMContext):
    semester = int(callback.data.split("_")[1])
    await state.update_data(semester=semester)
    await callback.message.edit_text(texts.SELECT_TYPE, reply_markup=types_kb())
    await state.set_state(SearchCheatsheetStates.waiting_for_type)


async def process_type(callback: types.CallbackQuery, state: FSMContext):
    type_ = callback.data.split("_")[1]
    data = await state.get_data()
    
    cheatsheets = db.get_cheatsheets(
        subject=data.get("subject"),
        semester=data.get("semester"),
        type_=type_,
        user_id=callback.from_user.id
    )
    
    if not cheatsheets:
        builder = InlineKeyboardBuilder()
        builder.button(text=texts.BACK_BUTTON, callback_data="back_to_semester")
        builder.button(text=texts.CANCEL_SEARCH, callback_data="back_to_menu")
        builder.adjust(2)
        
        await callback.message.edit_text(
            texts.NO_CHEATSHEETS,
            reply_markup=builder.as_markup()
        )
        return
    
    current_search_message_ids = []
    
    for cheatsheet in cheatsheets:
        pub_date = cheatsheet.get("approved_at", cheatsheet.get("created_at", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        
        text = texts.CHEATSHEET_INFO.format(
            name=cheatsheet["name"],
            subject=cheatsheet["subject"],
            semester=cheatsheet["semester"],
            type='–§–æ—Ä–º—É–ª–∞' if cheatsheet['type'] == 'formulas' else '–¢–µ–æ—Ä–∏—è',
            author=cheatsheet["author"],
            price=cheatsheet["price"],
            approved_at=pub_date
        )
        
        if cheatsheet["author_id"] == callback.from_user.id:
            markup = free_kb(cheatsheet["id"])
        else:
            db.cursor.execute("SELECT 1 FROM purchases WHERE user_id = ? AND cheatsheet_id = ?", 
                            (callback.from_user.id, cheatsheet["id"]))
            if db.cursor.fetchone():
                markup = free_kb(cheatsheet["id"])
            else:
                if cheatsheet["price"] > 0:
                    markup = buy_kb(cheatsheet["id"], cheatsheet["price"])
                else:
                    markup = free_kb(cheatsheet["id"])
        
        msg = await callback.message.answer(text, reply_markup=markup)
        current_search_message_ids.append(msg.message_id)
    
    await state.update_data(current_search_message_ids=current_search_message_ids)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–æ–∫ ----------------------------------------

async def process_add_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split("_")[1]
    await state.update_data(subject=subject)
    await callback.message.edit_text(
        texts.SELECT_SEMESTER,
        reply_markup=add_semesters_kb()
    )
    await state.set_state(AddCheatsheetStates.waiting_for_semester)


async def process_add_semester(callback: types.CallbackQuery, state: FSMContext):
    semester = int(callback.data.split("_")[2])
    await state.update_data(semester=semester)
    await callback.message.edit_text(
        texts.SELECT_TYPE,
        reply_markup=add_types_kb()
    )
    await state.set_state(AddCheatsheetStates.waiting_for_type)


async def process_add_type(callback: types.CallbackQuery, state: FSMContext):
    type_ = callback.data.split("_")[2]  # –¢–µ–ø–µ—Ä—å "add_type_formulas"
    await state.update_data(type=type_)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏:",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddCheatsheetStates.waiting_for_name)


async def process_name(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) == 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏")
        return
    
    if len(message.text) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(name=message.text.strip())
    await message.answer(
        texts.SEND_FILE,
        reply_markup=cancel_kb()
    )
    await state.set_state(AddCheatsheetStates.waiting_for_file)


async def process_file(message: types.Message, state: FSMContext):
    if not is_valid_file_type(message):
        await message.answer(texts.INVALID_FILE)
        return
    
    file_type = get_file_type(message)
    file_id = None
    
    try:
        if file_type == "photo":
            file_id = message.photo[-1].file_id
            file_path = await save_file(message.bot, message.photo[-1], file_type, message=message)
        elif file_type == "document":
            file_id = message.document.file_id
            file_path = await save_file(message.bot, message.document, file_type)
        elif file_type == "text":
            file_id = message.text
            file_path = None
        
        if file_type != "text" and not file_path:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            return
            
        await state.update_data(file_id=file_id, file_type=file_type)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫)
        await message.answer(texts.SET_PRICE, reply_markup=cancel_kb())
        await state.set_state(AddCheatsheetStates.waiting_for_price)
        
    except Exception as e:
        logging.error(f"Error in process_file: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")


async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price < 0:
            raise ValueError
    except ValueError:
        await message.answer(texts.INVALID_PRICE)
        return
    
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ADMIN_PERCENT
        final_price = round(price * (1 + config.ADMIN_PERCENT), 2)
        
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['subject', 'semester', 'type', 'name', 'file_id', 'file_type']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            await message.answer(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ ({', '.join(missing_fields)}). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        subject_id = db.cursor.execute("SELECT id FROM subjects WHERE name = ?", (data["subject"],)).fetchone()
        if not subject_id:
            db.add_subject(data["subject"])
            subject_id = db.cursor.execute("SELECT id FROM subjects WHERE name = ?", (data["subject"],)).fetchone()[0]
        else:
            subject_id = subject_id[0]
        
        cheatsheet_id = db.add_cheatsheet(
            subject_id=subject_id,
            semester=data["semester"],
            type_=data["type"],
            name=data["name"],
            file_id=data["file_id"],
            file_type=data["file_type"],
            price=final_price,
            author_id=message.from_user.id
        )
        
        user = message.from_user
        admin_text = texts.NEW_CHEATSHEET_FOR_REVIEW.format(
            name=data["name"],
            subject=data["subject"],
            semester=data["semester"],
            type='–§–æ—Ä–º—É–ª–∞' if data["type"] == 'formulas' else '–¢–µ–æ—Ä–∏—è',
            price=f"{final_price} (–∏—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: {price} ‚ÇΩ, –Ω–∞—Ü–µ–Ω–∫–∞: {config.ADMIN_PERCENT}%)",
            author=f"{user.username} (ID: {user.id})"
        )
        
        try:
            if data["file_type"] == "photo":
                await message.bot.send_photo(
                    chat_id=config.ADMIN_ID,
                    photo=data["file_id"],
                    caption=admin_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name:{cheatsheet_id}"),
                            InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price:{cheatsheet_id}")
                        ],
                        [
                            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve:{cheatsheet_id}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{cheatsheet_id}")
                        ]
                    ])
                )
            elif data["file_type"] == "document":
                await message.bot.send_document(
                    chat_id=config.ADMIN_ID,
                    document=data["file_id"],
                    caption=admin_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name:{cheatsheet_id}"),
                            InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price:{cheatsheet_id}")
                        ],
                        [
                            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve:{cheatsheet_id}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{cheatsheet_id}")
                        ]
                    ])
                )
            else:
                await message.bot.send_message(
                    chat_id=config.ADMIN_ID,
                    text=f"{admin_text}\n\n–¢–µ–∫—Å—Ç —à–ø–∞—Ä–≥–∞–ª–∫–∏:\n\n{data['file_id']}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name:{cheatsheet_id}"),
                            InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price:{cheatsheet_id}")
                        ],
                        [
                            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve:{cheatsheet_id}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{cheatsheet_id}")
                        ]
                    ])
                )
            
            await message.answer(texts.CHEATSHEET_SENT_FOR_REVIEW, reply_markup=main_menu())
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logging.error(f"Error sending cheatsheet to admin: {e}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"Error in process_price: {e}")
    
    await state.clear()


async def open_cheatsheet(callback: types.CallbackQuery):
    try:
        cheatsheet_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —à–ø–∞—Ä–≥–∞–ª–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        cheatsheet = db.get_cheatsheet(cheatsheet_id, user_id)
        
        if not cheatsheet:
            await callback.answer("–®–ø–∞—Ä–≥–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏
        if cheatsheet["file_type"] == "photo":
            await callback.message.answer_photo(
                cheatsheet["file_id"],
                caption=f"üìÑ {cheatsheet['name']}",
                reply_markup=main_menu()
            )
        elif cheatsheet["file_type"] == "document":
            await callback.message.answer_document(
                cheatsheet["file_id"],
                caption=f"üìÑ {cheatsheet['name']}",
                reply_markup=main_menu()
            )
        else:
            await callback.message.answer(
                f"üìÑ {cheatsheet['name']}\n\n{cheatsheet['file_id']}",
                reply_markup=main_menu()
            )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error opening cheatsheet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏", show_alert=True)

# –û—Ç–º–µ–Ω–∞ -----------------------------------------------------

async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã - –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é"""
    await reply_with_menu(callback, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


async def cancel_balance_request(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        if 'cancel_message_id' in data:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=data['cancel_message_id']
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (callback.message)
        try:
            await callback.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        await callback.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await reply_with_menu(callback, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", delete_current=False)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cancel_balance_request: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await state.clear()


async def handle_cancel_balance(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        try:
            await callback.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        data = await state.get_data()
        if 'cancel_message_id' in data:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=data['cancel_message_id']
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await callback.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await reply_with_menu(callback, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", delete_current=False)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel_balance: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await state.clear()


async def add_back_to_subject(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏"""
    try:
        await state.set_state(AddCheatsheetStates.waiting_for_subject)
        subjects = db.get_subjects()
        await callback.message.edit_text(
            texts.SELECT_SUBJECT,
            reply_markup=subjects_kb(subjects)
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_back_to_subject: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def add_back_to_semester(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–µ–º–µ—Å—Ç—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∏"""
    try:
        await state.set_state(AddCheatsheetStates.waiting_for_semester)
        await callback.message.edit_text(
            texts.SELECT_SEMESTER,
            reply_markup=add_semesters_kb()
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_back_to_semester: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ü–æ–∫—É–ø–∫–∞ ----------------------------------------------------

async def buy_cheatsheet(callback: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        if not callback.data:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return

        data_parts = callback.data.split("_")
        if len(data_parts) != 2:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return

        action, identifier = data_parts

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫
        if action == "free":
            await callback.message.answer(
                f"üìÑ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:\n\n{identifier}",
                reply_markup=main_menu()
            )
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫
        try:
            cheatsheet_id = int(identifier)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —à–ø–∞—Ä–≥–∞–ª–∫–∏")
            return

        user_id = callback.from_user.id
        cheatsheet = db.get_cheatsheet(cheatsheet_id, user_id)

        if not cheatsheet:
            await callback.answer("–®–ø–∞—Ä–≥–∞–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['price', 'author_id', 'file_id', 'file_type']
        if not all(field in cheatsheet for field in required_fields):
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–∫–∏", show_alert=True)
            return

        # –ï—Å–ª–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —Å—Ä–∞–∑—É –≤—ã–¥–∞–µ–º
        if cheatsheet["author_id"] == user_id:
            if cheatsheet["file_type"] == "photo":
                await callback.message.answer_photo(
                    cheatsheet["file_id"],
                    caption="‚úÖ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:",
                    reply_markup=main_menu()
                )
            elif cheatsheet["file_type"] == "document":
                await callback.message.answer_document(
                    cheatsheet["file_id"],
                    caption="‚úÖ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:",
                    reply_markup=main_menu()
                )
            else:
                await callback.message.answer(
                    f"‚úÖ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:\n\n{cheatsheet['file_id']}",
                    reply_markup=main_menu()
                )
            await callback.message.delete()
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —à–ø–∞—Ä–≥–∞–ª–∫–∞
        db.cursor.execute("SELECT 1 FROM purchases WHERE user_id = ? AND cheatsheet_id = ?", 
                        (user_id, cheatsheet_id))
        if db.cursor.fetchone():
            if cheatsheet["file_type"] == "photo":
                await callback.message.answer_photo(
                    cheatsheet["file_id"],
                    caption="‚úÖ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:",
                    reply_markup=main_menu()
                )
            elif cheatsheet["file_type"] == "document":
                await callback.message.answer_document(
                    cheatsheet["file_id"],
                    caption="‚úÖ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:",
                    reply_markup=main_menu()
                )
            else:
                await callback.message.answer(
                    f"‚úÖ –í–∞—à–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∞:\n\n{cheatsheet['file_id']}",
                    reply_markup=main_menu()
                )
            await callback.message.delete()
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        user_balance = db.get_user_balance(user_id)
        if user_balance < cheatsheet["price"]:
            await callback.answer(texts.NOT_ENOUGH_MONEY, show_alert=True)
            await reply_with_menu(callback, 
                                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±.\n"
                                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {cheatsheet['price']} —Ä—É–±.\n\n"
                                "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        try:
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            if not db.update_user_balance(user_id, -cheatsheet["price"]):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞")

            # –ó–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
            if not db.add_purchase(user_id, cheatsheet_id, cheatsheet["price"]):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∫—É")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if cheatsheet["file_type"] == "photo":
                await callback.message.answer_photo(
                    cheatsheet["file_id"],
                    caption=f"‚úÖ {texts.PURCHASE_SUCCESS}",
                    reply_markup=main_menu()
                )
            elif cheatsheet["file_type"] == "document":
                await callback.message.answer_document(
                    cheatsheet["file_id"],
                    caption=f"‚úÖ {texts.PURCHASE_SUCCESS}",
                    reply_markup=main_menu()
                )
            else:  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏
                await callback.message.answer(
                    f"‚úÖ {texts.PURCHASE_SUCCESS}\n\n{cheatsheet['file_id']}",
                    reply_markup=main_menu()
                )

            await callback.message.delete()
            await callback.answer()

        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            db.conn.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return

    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ buy_cheatsheet: {e}")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
async def request_balance(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /deposit
    try:
        await message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    msg = await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):",
        reply_markup=cancel_kb("balance")
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(cancel_message_id=msg.message_id)
    await state.set_state(BalanceRequestStates.waiting_for_amount)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É
async def process_balance_amount(message: types.Message, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        data = await state.get_data()
        if 'cancel_message_id' in data:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=data['cancel_message_id']
                )
            except:
                pass

        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        msg = await message.answer(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç PDF/JPG/PNG),\n"
            "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Ç.–¥.):",
            reply_markup=cancel_kb("balance_proof")
        )
        
        await state.update_data(
            amount=amount,
            cancel_message_id=msg.message_id
        )
        await state.set_state(BalanceRequestStates.waiting_for_proof)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def process_balance_proof(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
    if 'amount' not in data or data['amount'] <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞", reply_markup=main_menu())
        await state.clear()
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    except:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç
    file_id = None
    file_type = None
    proof_text = None

    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.text:
        proof_text = message.text
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=main_menu())
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    request_id = db.add_balance_request(
        user_id=message.from_user.id,
        amount=data['amount'],
        proof_text=proof_text,
        file_id=file_id,
        file_type=file_type
    )

    if not request_id:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=main_menu())
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await notify_admin_about_request(message.bot, request_id, message.from_user, data['amount'], file_id, file_type, proof_text)
    
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", reply_markup=main_menu())
    await state.clear()


async def process_balance_request(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
    
    try:
        user_id, amount = message.text.split()
        user_id = int(user_id)
        amount = float(amount)
        
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        db.update_user_balance(user_id, amount)
        await message.answer(
            f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.",
            reply_markup=main_menu()
        )
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.bot.send_message(
            chat_id=user_id,
            text=f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {db.get_user_balance(user_id)} —Ä—É–±."
        )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞
        await callback.message.delete()
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if 'current_search_message_ids' in data:
            for msg_id in data['current_search_message_ids']:
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await reply_with_menu(callback, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", delete_current=False)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞
async def back_to_subject(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if 'current_search_message_ids' in data:
            for msg_id in data['current_search_message_ids']:
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        
        await state.set_state(SearchCheatsheetStates.waiting_for_subject)
        subjects = db.get_subjects()
        await callback.message.edit_text(
            texts.SELECT_SUBJECT,
            reply_markup=subjects_kb(subjects)
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_subject: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É —Å–µ–º–µ—Å—Ç—Ä–∞
async def back_to_semester(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–µ–º–µ—Å—Ç—Ä–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if 'current_search_message_ids' in data:
            for msg_id in data['current_search_message_ids']:
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        
        await state.set_state(SearchCheatsheetStates.waiting_for_semester)
        await callback.message.edit_text(
            texts.SELECT_SEMESTER,
            reply_markup=semesters_kb()
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_semester: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def start_withdraw(message: types.Message, state: FSMContext):
    balance = db.get_user_balance(message.from_user.id)
    if balance <= 0:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=main_menu())
        return
    
    await message.answer(
        texts.ENTER_WITHDRAW_AMOUNT,
        reply_markup=cancel_kb()
    )
    await state.set_state(WithdrawStates.waiting_for_amount)


async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        balance = db.get_user_balance(message.from_user.id)
        
        if amount <= 0 or amount > balance:
            await message.answer(texts.INVALID_WITHDRAW_AMOUNT)
            return
            
        await state.update_data(amount=amount)
        await message.answer(
            texts.ENTER_WITHDRAW_DETAILS,
            reply_markup=cancel_kb()
        )
        await state.set_state(WithdrawStates.waiting_for_details)
    except ValueError:
        await message.answer(texts.INVALID_AMOUNT_FORMAT)


async def process_withdraw_details(message: types.Message, state: FSMContext):
    data = await state.get_data()
    amount = data['amount']
    details = message.text
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    request_id = db.add_withdraw_request(
        user_id=message.from_user.id,
        amount=amount,
        details=details
    )
    
    if not request_id:
        await message.answer(texts.ERROR, reply_markup=main_menu())
        await state.clear()
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        texts.WITHDRAW_REQUEST_SENT.format(
            amount=amount,
            admin_username=config.ADMIN_USERNAME
        ),
        reply_markup=main_menu()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await notify_admin_about_withdraw(
        message.bot, 
        request_id,
        message.from_user,
        amount,
        details
    )
    
    await state.clear()


async def handle_back_button(message: types.Message, state: FSMContext):
    await state.clear()


async def notify_admin_about_withdraw(bot: Bot, request_id: int, user: types.User, amount: float, details: str):
    text = texts.WITHDRAW_REQUEST.format(
        id=request_id,
        username=user.username,
        user_id=user.id,
        amount=amount,
        details=details,
        date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"withdraw_approve_{request_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"withdraw_reject_{request_id}")]
    ])
    
    try:
        await bot.send_message(
            chat_id=config.ADMIN_ID,
            text=text,
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")


async def handle_withdraw_request(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        if len(parts) != 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        action, request_id = parts[1], parts[2]
        
        try:
            request_id = int(request_id)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        db.cursor.execute("""
        SELECT user_id, amount 
        FROM withdraw_requests 
        WHERE id = ? AND status = 'pending'
        """, (request_id,))
        request = db.cursor.fetchone()

        if not request:
            await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            return

        user_id, amount = request

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        success = db.update_withdraw_status(
            request_id=request_id,
            status="approved" if action == "approve" else "rejected",
            admin_id=callback.from_user.id
        )

        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            return

        # –ï—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–æ - —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        if action == "approve":
            if not db.update_user_balance(user_id, -amount):
                await callback.answer("–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if action == "approve":
            new_balance = db.get_user_balance(user_id)
            user_message = (
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ä—É–±. –æ–¥–æ–±—Ä–µ–Ω.\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±."
            )
        else:
            user_message = f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω–µ–Ω."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.bot.send_message(user_id, user_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        try:
            await callback.message.edit_text(
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} {'–æ–¥–æ–±—Ä–µ–Ω' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}",
                reply_markup=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.message(ModerationStates.waiting_for_decision, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_cheatsheet(message: types.Message, state: FSMContext):
    await message.answer(texts.SET_PRICE, reply_markup=cancel_kb())
    await state.set_state(AddCheatsheetStates.waiting_for_price)

@router.message(ModerationStates.waiting_for_decision, F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def request_name_change(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=cancel_kb()
    )
    await state.set_state(ModerationStates.waiting_for_new_name)

@router.message(ModerationStates.waiting_for_new_name)
async def process_new_name(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) == 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
        
    if len(message.text) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
        
    await state.update_data(name=message.text.strip())
    await show_preview(message, state)

@router.message(ModerationStates.waiting_for_decision, F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
async def request_price_change(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:",
        reply_markup=cancel_kb()
    )
    await state.set_state(ModerationStates.waiting_for_new_price)

async def show_preview(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file_type = data.get('file_type')
    file_id = data.get('file_id')
    
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    
    preview_text = (
        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–ø–∞—Ä–≥–∞–ª–∫–∏:\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {data.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üéì –°–µ–º–µ—Å—Ç—Ä: {data.get('semester', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìù –¢–∏–ø: {'–§–æ—Ä–º—É–ª—ã' if data.get('type') == 'formulas' else '–¢–µ–æ—Ä–∏—è'}\n"
        f"üìé –¢–∏–ø —Ñ–∞–π–ª–∞: {'–§–æ—Ç–æ' if file_type == 'photo' else '–î–æ–∫—É–º–µ–Ω—Ç' if file_type == 'document' else '–¢–µ–∫—Å—Ç'}"
    )
    
    if file_type == "photo":
        await message.answer_photo(file_id, caption=preview_text, reply_markup=markup)
    elif file_type == "document":
        await message.answer_document(file_id, caption=preview_text, reply_markup=markup)
    else:
        await message.answer(f"{preview_text}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{file_id}", reply_markup=markup)
    
    await state.set_state(ModerationStates.waiting_for_decision)
